// Code generated by protoc-gen-go. DO NOT EDIT.
// source: logStream.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	logStream.proto

It has these top-level messages:
	LogRequest
	LogResponse
	PingRequest
	PingResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// message is the structure that get serialized
// the numbered fields are necessary for the serialization.
// LogRequest is the structure that gets serialized
// and then sent to rpc server.
type LogRequest struct {
	Filename string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Path     string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Line     string `protobuf:"bytes,3,opt,name=line" json:"line,omitempty"`
}

func (m *LogRequest) Reset()                    { *m = LogRequest{} }
func (m *LogRequest) String() string            { return proto.CompactTextString(m) }
func (*LogRequest) ProtoMessage()               {}
func (*LogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LogRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *LogRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *LogRequest) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

// LogResponse is the reply from rpc server
type LogResponse struct {
	Res string `protobuf:"bytes,1,opt,name=res" json:"res,omitempty"`
}

func (m *LogResponse) Reset()                    { *m = LogResponse{} }
func (m *LogResponse) String() string            { return proto.CompactTextString(m) }
func (*LogResponse) ProtoMessage()               {}
func (*LogResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LogResponse) GetRes() string {
	if m != nil {
		return m.Res
	}
	return ""
}

// PingRequest sends two numbers to mediator
type PingRequest struct {
	A          int32  `protobuf:"varint,1,opt,name=a" json:"a,omitempty"`
	B          int32  `protobuf:"varint,2,opt,name=b" json:"b,omitempty"`
	StreamerId string `protobuf:"bytes,3,opt,name=streamerId" json:"streamerId,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PingRequest) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *PingRequest) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

func (m *PingRequest) GetStreamerId() string {
	if m != nil {
		return m.StreamerId
	}
	return ""
}

// PingResponse returns the mediator's response
type PingResponse struct {
	Res int32 `protobuf:"varint,2,opt,name=res" json:"res,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PingResponse) GetRes() int32 {
	if m != nil {
		return m.Res
	}
	return 0
}

func init() {
	proto.RegisterType((*LogRequest)(nil), "api.LogRequest")
	proto.RegisterType((*LogResponse)(nil), "api.LogResponse")
	proto.RegisterType((*PingRequest)(nil), "api.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "api.PingResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LogStreamer service

type LogStreamerClient interface {
	// the LogStreamer service sends a LogRequest
	// and recieves a LogResponse
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
}

type logStreamerClient struct {
	cc *grpc.ClientConn
}

func NewLogStreamerClient(cc *grpc.ClientConn) LogStreamerClient {
	return &logStreamerClient{cc}
}

func (c *logStreamerClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := grpc.Invoke(ctx, "/api.LogStreamer/Log", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LogStreamer service

type LogStreamerServer interface {
	// the LogStreamer service sends a LogRequest
	// and recieves a LogResponse
	Log(context.Context, *LogRequest) (*LogResponse, error)
}

func RegisterLogStreamerServer(s *grpc.Server, srv LogStreamerServer) {
	s.RegisterService(&_LogStreamer_serviceDesc, srv)
}

func _LogStreamer_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamerServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.LogStreamer/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamerServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogStreamer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.LogStreamer",
	HandlerType: (*LogStreamerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Log",
			Handler:    _LogStreamer_Log_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logStream.proto",
}

// Client API for Pinger service

type PingerClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type pingerClient struct {
	cc *grpc.ClientConn
}

func NewPingerClient(cc *grpc.ClientConn) PingerClient {
	return &pingerClient{cc}
}

func (c *pingerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/api.Pinger/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pinger service

type PingerServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
}

func RegisterPingerServer(s *grpc.Server, srv PingerServer) {
	s.RegisterService(&_Pinger_serviceDesc, srv)
}

func _Pinger_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Pinger/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pinger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Pinger",
	HandlerType: (*PingerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Pinger_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logStream.proto",
}

func init() { proto.RegisterFile("logStream.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xc1, 0x4e, 0xc3, 0x30,
	0x10, 0x44, 0x31, 0x69, 0x2b, 0xd8, 0x56, 0x6a, 0xd9, 0x53, 0x94, 0x03, 0x54, 0x3e, 0x21, 0x24,
	0x72, 0x28, 0x07, 0xc4, 0x27, 0x54, 0xea, 0xa1, 0x4a, 0xbf, 0xc0, 0x11, 0x4b, 0xb0, 0x94, 0xda,
	0xc6, 0x36, 0xff, 0x8f, 0xbc, 0x0e, 0x4d, 0x7a, 0x9b, 0x7d, 0xf6, 0xce, 0x8c, 0x0d, 0xeb, 0xde,
	0x76, 0xa7, 0xe8, 0x49, 0x9d, 0x6b, 0xe7, 0x6d, 0xb4, 0x58, 0x28, 0xa7, 0xe5, 0x11, 0xe0, 0x60,
	0xbb, 0x86, 0x7e, 0x7e, 0x29, 0x44, 0xac, 0xe0, 0xee, 0x4b, 0xf7, 0x64, 0xd4, 0x99, 0x4a, 0xb1,
	0x15, 0xcf, 0xf7, 0xcd, 0x65, 0x46, 0x84, 0x99, 0x53, 0xf1, 0xbb, 0xbc, 0x65, 0xce, 0x3a, 0xb1,
	0x5e, 0x1b, 0x2a, 0x8b, 0xcc, 0x92, 0x96, 0x4f, 0xb0, 0x64, 0xc7, 0xe0, 0xac, 0x09, 0x84, 0x1b,
	0x28, 0x3c, 0x85, 0xc1, 0x2d, 0x49, 0xb9, 0x87, 0xe5, 0x51, 0x9b, 0x4b, 0xe6, 0x0a, 0x84, 0xe2,
	0xe3, 0x79, 0x23, 0x54, 0x9a, 0x5a, 0x8e, 0x98, 0x37, 0xa2, 0xc5, 0x47, 0x80, 0xc0, 0x95, 0xc9,
	0xef, 0x3f, 0x87, 0x94, 0x09, 0x91, 0x5b, 0x58, 0x65, 0xab, 0xeb, 0xb0, 0xbc, 0x9f, 0xe4, 0xee,
	0x83, 0xdb, 0x9c, 0x86, 0x15, 0x7c, 0x81, 0xe2, 0x60, 0x3b, 0x5c, 0xd7, 0xca, 0xe9, 0x7a, 0x7c,
	0x78, 0xb5, 0x19, 0x41, 0xb6, 0x92, 0x37, 0xbb, 0x77, 0x58, 0x24, 0x73, 0xf2, 0xf8, 0x0a, 0xb3,
	0xa4, 0x30, 0xdf, 0x9a, 0x94, 0xaf, 0x1e, 0x26, 0xe4, 0x7f, 0xb1, 0x5d, 0xf0, 0xff, 0xbe, 0xfd,
	0x05, 0x00, 0x00, 0xff, 0xff, 0x94, 0x47, 0x86, 0x1c, 0x72, 0x01, 0x00, 0x00,
}
