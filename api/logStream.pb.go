// Code generated by protoc-gen-go. DO NOT EDIT.
// source: logStream.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	logStream.proto

It has these top-level messages:
	LogRequest
	LogResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogRequest struct {
	Filename string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Path     string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Line     string `protobuf:"bytes,3,opt,name=line" json:"line,omitempty"`
}

func (m *LogRequest) Reset()                    { *m = LogRequest{} }
func (m *LogRequest) String() string            { return proto.CompactTextString(m) }
func (*LogRequest) ProtoMessage()               {}
func (*LogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LogRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *LogRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *LogRequest) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

type LogResponse struct {
	Res string `protobuf:"bytes,1,opt,name=res" json:"res,omitempty"`
}

func (m *LogResponse) Reset()                    { *m = LogResponse{} }
func (m *LogResponse) String() string            { return proto.CompactTextString(m) }
func (*LogResponse) ProtoMessage()               {}
func (*LogResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LogResponse) GetRes() string {
	if m != nil {
		return m.Res
	}
	return ""
}

func init() {
	proto.RegisterType((*LogRequest)(nil), "api.LogRequest")
	proto.RegisterType((*LogResponse)(nil), "api.LogResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LogStreamer service

type LogStreamerClient interface {
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
}

type logStreamerClient struct {
	cc *grpc.ClientConn
}

func NewLogStreamerClient(cc *grpc.ClientConn) LogStreamerClient {
	return &logStreamerClient{cc}
}

func (c *logStreamerClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := grpc.Invoke(ctx, "/api.LogStreamer/Log", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LogStreamer service

type LogStreamerServer interface {
	Log(context.Context, *LogRequest) (*LogResponse, error)
}

func RegisterLogStreamerServer(s *grpc.Server, srv LogStreamerServer) {
	s.RegisterService(&_LogStreamer_serviceDesc, srv)
}

func _LogStreamer_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamerServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.LogStreamer/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamerServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogStreamer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.LogStreamer",
	HandlerType: (*LogStreamerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Log",
			Handler:    _LogStreamer_Log_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logStream.proto",
}

func init() { proto.RegisterFile("logStream.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8e, 0xb1, 0x0a, 0xc2, 0x30,
	0x10, 0x86, 0xad, 0x11, 0xd1, 0x73, 0x68, 0xb9, 0xa9, 0x74, 0x51, 0x3a, 0x89, 0x43, 0x07, 0x9d,
	0x7c, 0x87, 0x0e, 0x52, 0x9f, 0x20, 0xc2, 0x59, 0x03, 0x69, 0x2e, 0x26, 0xf1, 0xfd, 0x25, 0x89,
	0xd8, 0xed, 0xbf, 0x8f, 0xe3, 0xe3, 0x83, 0x52, 0xf3, 0x78, 0x0f, 0x8e, 0xe4, 0xd4, 0x59, 0xc7,
	0x81, 0x51, 0x48, 0xab, 0xda, 0x1b, 0x40, 0xcf, 0xe3, 0x40, 0xef, 0x0f, 0xf9, 0x80, 0x0d, 0x6c,
	0x9e, 0x4a, 0x93, 0x91, 0x13, 0xd5, 0xc5, 0xa1, 0x38, 0x6e, 0x87, 0xff, 0x8d, 0x08, 0x2b, 0x2b,
	0xc3, 0xab, 0x5e, 0x26, 0x9e, 0x76, 0x64, 0x5a, 0x19, 0xaa, 0x45, 0x66, 0x71, 0xb7, 0x7b, 0xd8,
	0x25, 0xa3, 0xb7, 0x6c, 0x3c, 0x61, 0x05, 0xc2, 0x91, 0xff, 0xd9, 0xe2, 0x3c, 0x5f, 0xd3, 0x43,
	0x4e, 0x21, 0x87, 0x27, 0x10, 0x3d, 0x8f, 0x58, 0x76, 0xd2, 0xaa, 0x6e, 0x6e, 0x69, 0xaa, 0x19,
	0x64, 0x55, 0xbb, 0x78, 0xac, 0x53, 0xf9, 0xe5, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x51, 0xc6, 0xe1,
	0x53, 0xcc, 0x00, 0x00, 0x00,
}
